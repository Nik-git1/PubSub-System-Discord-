# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import disc_pb2 as disc__pb2


class RegisterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/disc.RegisterService/register',
                request_serializer=disc__pb2.Server.SerializeToString,
                response_deserializer=disc__pb2.Result.FromString,
                )
        self.get_client_list = channel.unary_unary(
                '/disc.RegisterService/get_client_list',
                request_serializer=disc__pb2.void.SerializeToString,
                response_deserializer=disc__pb2.Server_list.FromString,
                )


class RegisterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_client_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegisterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=disc__pb2.Server.FromString,
                    response_serializer=disc__pb2.Result.SerializeToString,
            ),
            'get_client_list': grpc.unary_unary_rpc_method_handler(
                    servicer.get_client_list,
                    request_deserializer=disc__pb2.void.FromString,
                    response_serializer=disc__pb2.Server_list.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'disc.RegisterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegisterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.RegisterService/register',
            disc__pb2.Server.SerializeToString,
            disc__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_client_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.RegisterService/get_client_list',
            disc__pb2.void.SerializeToString,
            disc__pb2.Server_list.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class JoinServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.join = channel.unary_unary(
                '/disc.JoinService/join',
                request_serializer=disc__pb2.JoinReq.SerializeToString,
                response_deserializer=disc__pb2.Result.FromString,
                )
        self.leave = channel.unary_unary(
                '/disc.JoinService/leave',
                request_serializer=disc__pb2.JoinReq.SerializeToString,
                response_deserializer=disc__pb2.Result.FromString,
                )


class JoinServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def join(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def leave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JoinServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'join': grpc.unary_unary_rpc_method_handler(
                    servicer.join,
                    request_deserializer=disc__pb2.JoinReq.FromString,
                    response_serializer=disc__pb2.Result.SerializeToString,
            ),
            'leave': grpc.unary_unary_rpc_method_handler(
                    servicer.leave,
                    request_deserializer=disc__pb2.JoinReq.FromString,
                    response_serializer=disc__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'disc.JoinService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JoinService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.JoinService/join',
            disc__pb2.JoinReq.SerializeToString,
            disc__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def leave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.JoinService/leave',
            disc__pb2.JoinReq.SerializeToString,
            disc__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ArticlesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.publishArticles = channel.unary_unary(
                '/disc.ArticlesService/publishArticles',
                request_serializer=disc__pb2.ArticleProposal.SerializeToString,
                response_deserializer=disc__pb2.Result.FromString,
                )
        self.getArticles = channel.unary_unary(
                '/disc.ArticlesService/getArticles',
                request_serializer=disc__pb2.ArticlesRequest.SerializeToString,
                response_deserializer=disc__pb2.Articles_list.FromString,
                )


class ArticlesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def publishArticles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getArticles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArticlesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'publishArticles': grpc.unary_unary_rpc_method_handler(
                    servicer.publishArticles,
                    request_deserializer=disc__pb2.ArticleProposal.FromString,
                    response_serializer=disc__pb2.Result.SerializeToString,
            ),
            'getArticles': grpc.unary_unary_rpc_method_handler(
                    servicer.getArticles,
                    request_deserializer=disc__pb2.ArticlesRequest.FromString,
                    response_serializer=disc__pb2.Articles_list.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'disc.ArticlesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ArticlesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def publishArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.ArticlesService/publishArticles',
            disc__pb2.ArticleProposal.SerializeToString,
            disc__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.ArticlesService/getArticles',
            disc__pb2.ArticlesRequest.SerializeToString,
            disc__pb2.Articles_list.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
